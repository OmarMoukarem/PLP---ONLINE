<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Premier League Predictor â€“ 2025/26</title>
<style>
body { font-family:sans-serif; margin:20px; }
header { text-align:center; margin-bottom:20px; }
.sub { font-size:0.9em; color:gray; }
.wrap { display:flex; flex-direction:column; gap:10px; }
.fixture { margin-bottom:10px; }
input { width:40px; }
button { margin-top:10px; padding:5px 10px; }
table { border-collapse: collapse; margin-top: 20px; width:100%; }
td, th { border:1px solid #ccc; padding:5px; text-align:center; }
</style>
</head>
<body>

<header>
  <h1>Premier League Predictor â€“ 2025/26</h1>
  <div class="sub">10 players â€¢ full 2025/26 fixtures preloaded â€¢ exact score + W/D/L â€¢ auto-scoring â€¢ Excel export</div>
</header>

<div id="playerLinks" class="wrap"></div>
<div id="fixturesWrap" class="wrap"></div>
<button id="exportExcel">Export to Excel</button>

<script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js"></script>

<script>
const DEFAULT_PLAYERS=['Omar','Robbie','Khalil','Idriss','Aboudi','Masri','Hafez','Joseph','Rizk','Dani'];
const SEASON='2025-26';
const ADMIN_PIN='1234';
// ðŸ”¹ Replace with your Firebase config
const FIREBASE_CONFIG = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_PROJECT_ID.appspot.com",
  messagingSenderId: "YOUR_SENDER_ID",
  appId: "YOUR_APP_ID"
};

const state={mode:'guest',player:'',season:SEASON,fixtures:[],results:{},predictions:{},players:[...DEFAULT_PLAYERS],gwList:[],db:null};

// ðŸ”¹ Fixtures placeholder â€“ add full GW2â€“GW38 as needed
const SAMPLE_FIXTURES=[
  {id:'1',gw:1,home:'Liverpool',away:'AFC Bournemouth'},
  {id:'2',gw:1,home:'Aston Villa',away:'Newcastle United'},
  {id:'3',gw:1,home:'Brighton & Hove Albion',away:'Fulham'},
  {id:'4',gw:1,home:'Sunderland',away:'West Ham United'},
  {id:'5',gw:1,home:'Tottenham Hotspur',away:'Burnley'},
  {id:'6',gw:1,home:'Wolverhampton Wanderers',away:'Manchester City'},
  {id:'7',gw:1,home:'Chelsea',away:'Crystal Palace'},
  {id:'8',gw:1,home:'Nottingham Forest',away:'Brentford'},
  {id:'9',gw:1,home:'Manchester United',away:'Arsenal'},
  {id:'10',gw:1,home:'Leeds United',away:'Everton'}
];

function parseScore(s){if(!s)return null; const p=s.trim().split(/[-:xX]/); if(p.length!==2) return null; const a=parseInt(p[0],10),b=parseInt(p[1],10); if(isNaN(a)||isNaN(b)) return null; return {hg:a,ag:b};}
function outcomeFromScore(hg,ag){return hg>ag?'H':hg<ag?'A':'D';}
function goalDiff(hg,ag){return hg-ag;}
function scorePrediction(actual,pred){if(!actual||!pred?.score) return 0; const {hg,ag}=actual; const p=parseScore(pred.score); if(!p)return 0; let pts=0; const pOut=outcomeFromScore(p.hg,p.ag); if(pOut===outcomeFromScore(hg,ag)) pts+=1; if(p.hg===hg&&p.ag===ag) pts+=3; if(goalDiff(p.hg,p.ag)===goalDiff(hg,ag)&&!(p.hg===hg&&p.ag===ag)) pts+=1; return pts;}

async function initFirebase(){try{const app=firebase.apps.length?firebase.apps[0]:firebase.initializeApp(FIREBASE_CONFIG); return firebase.firestore(app);}catch(e){console.error('Firebase error',e); return null;}}

async function savePrediction(matchId,player,data){state.predictions[player]=state.predictions[player]||{}; state.predictions[player][matchId]=data; localStorage.setItem('plp_online_'+state.season,JSON.stringify({predictions:state.predictions,results:state.results})); if(state.db) await state.db.collection('seasons').doc(state.season).collection('predictions').doc(`${player}__${matchId}`).set({player,matchId,...data,ts:new Date().toISOString()},{merge:true});}

async function saveResult(matchId,hg,ag){state.results[matchId]={hg,ag}; localStorage.setItem('plp_online_'+state.season,JSON.stringify({predictions:state.predictions,results:state.results})); if(state.db) await state.db.collection('seasons').doc(state.season).collection('results').doc(matchId).set({matchId,hg,ag},{merge:true});}

async function loadFixtures(){state.fixtures=SAMPLE_FIXTURES.slice(); state.gwList=[...new Set(state.fixtures.map(m=>m.gw))].sort((a,b)=>a-b);}

function renderPlayerLinks(){const base=location.origin+location.pathname; document.getElementById('playerLinks').innerHTML=state.players.map(p=>`<div><a href="${base}?player=${encodeURIComponent(p)}">${p}</a></div>`).join('');}

function renderFixtures(){const wrap=document.getElementById('fixturesWrap'); wrap.innerHTML=''; state.fixtures.forEach(f=>{
  const div=document.createElement('div'); div.className='fixture';
  div.innerHTML=`<b>${f.home} vs ${f.away}</b> â€“ <input placeholder="score e.g. 2-1" data-match="${f.id}"/>`;
  wrap.appendChild(div);
});}

function collectPredictions(){state.players.forEach(player=>{state.predictions[player]=state.predictions[player]||{}; state.fixtures.forEach(f=>{
  const input=document.querySelector(`.fixture input[data-match="${f.id}"]`);
  if(input?.value) state.predictions[player][f.id]={score:input.value};
});});}

function exportToExcel(){
  collectPredictions();
  const ws_data=[['Player','Match','Home','Away','Prediction','Points']];
  state.players.forEach(player=>{
    state.fixtures.forEach(f=>{
      const pred=state.predictions[player]?.[f.id];
      const actual=state.results[f.id];
      const pts=actual?scorePrediction(actual,pred):0;
      ws_data.push([player,f.id,f.home,f.away,pred?.score||'',pts]);
    });
  });
  const wb=XLSX.utils.book_new();
  const ws=XLSX.utils.aoa_to_sheet(ws_data);
  XLSX.utils.book_append_sheet(wb,ws,'Predictions');
  XLSX.writeFile(wb,'PLP_Predictions.xlsx');
}

document.addEventListener('DOMContentLoaded',async()=>{
  state.db=await initFirebase();
  await loadFixtures();
  renderPlayerLinks();
  renderFixtures();
  document.getElementById('exportExcel').addEventListener('click',exportToExcel);
});
</script>

</body>
</html>